#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBSever
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HrSystem")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertActCha(ActCha instance);
    partial void UpdateActCha(ActCha instance);
    partial void DeleteActCha(ActCha instance);
    partial void Insertactivity(activity instance);
    partial void Updateactivity(activity instance);
    partial void Deleteactivity(activity instance);
    partial void InsertCNatu(CNatu instance);
    partial void UpdateCNatu(CNatu instance);
    partial void DeleteCNatu(CNatu instance);
    partial void InsertColCha(ColCha instance);
    partial void UpdateColCha(ColCha instance);
    partial void DeleteColCha(ColCha instance);
    partial void InsertCollege(College instance);
    partial void UpdateCollege(College instance);
    partial void DeleteCollege(College instance);
    partial void Insertcou_teaching(cou_teaching instance);
    partial void Updatecou_teaching(cou_teaching instance);
    partial void Deletecou_teaching(cou_teaching instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertFaulty(Faulty instance);
    partial void UpdateFaulty(Faulty instance);
    partial void DeleteFaulty(Faulty instance);
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    partial void InsertMajor(Major instance);
    partial void UpdateMajor(Major instance);
    partial void DeleteMajor(Major instance);
    partial void Insertoffered(offered instance);
    partial void Updateoffered(offered instance);
    partial void Deleteoffered(offered instance);
    partial void InsertOrgAct(OrgAct instance);
    partial void UpdateOrgAct(OrgAct instance);
    partial void DeleteOrgAct(OrgAct instance);
    partial void InsertOrganization(Organization instance);
    partial void UpdateOrganization(Organization instance);
    partial void DeleteOrganization(Organization instance);
    partial void InsertOrgCha(OrgCha instance);
    partial void UpdateOrgCha(OrgCha instance);
    partial void DeleteOrgCha(OrgCha instance);
    partial void InsertOrgGra(OrgGra instance);
    partial void UpdateOrgGra(OrgGra instance);
    partial void DeleteOrgGra(OrgGra instance);
    partial void InsertPolitics(Politics instance);
    partial void UpdatePolitics(Politics instance);
    partial void DeletePolitics(Politics instance);
    partial void InsertSC(SC instance);
    partial void UpdateSC(SC instance);
    partial void DeleteSC(SC instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertTeacher(Teacher instance);
    partial void UpdateTeacher(Teacher instance);
    partial void DeleteTeacher(Teacher instance);
    partial void Insertuserinfo(userinfo instance);
    partial void Updateuserinfo(userinfo instance);
    partial void Deleteuserinfo(userinfo instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::DBSever.Properties.Settings.Default.HrSystemConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ActCha> ActCha
		{
			get
			{
				return this.GetTable<ActCha>();
			}
		}
		
		public System.Data.Linq.Table<activity> activity
		{
			get
			{
				return this.GetTable<activity>();
			}
		}
		
		public System.Data.Linq.Table<CNatu> CNatu
		{
			get
			{
				return this.GetTable<CNatu>();
			}
		}
		
		public System.Data.Linq.Table<ColCha> ColCha
		{
			get
			{
				return this.GetTable<ColCha>();
			}
		}
		
		public System.Data.Linq.Table<College> College
		{
			get
			{
				return this.GetTable<College>();
			}
		}
		
		public System.Data.Linq.Table<cou_teaching> cou_teaching
		{
			get
			{
				return this.GetTable<cou_teaching>();
			}
		}
		
		public System.Data.Linq.Table<Course> Course
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Faulty> Faulty
		{
			get
			{
				return this.GetTable<Faulty>();
			}
		}
		
		public System.Data.Linq.Table<Job> Job
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
		
		public System.Data.Linq.Table<Major> Major
		{
			get
			{
				return this.GetTable<Major>();
			}
		}
		
		public System.Data.Linq.Table<offered> offered
		{
			get
			{
				return this.GetTable<offered>();
			}
		}
		
		public System.Data.Linq.Table<OrgAct> OrgAct
		{
			get
			{
				return this.GetTable<OrgAct>();
			}
		}
		
		public System.Data.Linq.Table<Organization> Organization
		{
			get
			{
				return this.GetTable<Organization>();
			}
		}
		
		public System.Data.Linq.Table<OrgCha> OrgCha
		{
			get
			{
				return this.GetTable<OrgCha>();
			}
		}
		
		public System.Data.Linq.Table<OrgGra> OrgGra
		{
			get
			{
				return this.GetTable<OrgGra>();
			}
		}
		
		public System.Data.Linq.Table<Politics> Politics
		{
			get
			{
				return this.GetTable<Politics>();
			}
		}
		
		public System.Data.Linq.Table<SC> SC
		{
			get
			{
				return this.GetTable<SC>();
			}
		}
		
		public System.Data.Linq.Table<Student> Student
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Teacher> Teacher
		{
			get
			{
				return this.GetTable<Teacher>();
			}
		}
		
		public System.Data.Linq.Table<userinfo> userinfo
		{
			get
			{
				return this.GetTable<userinfo>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActCha")]
	public partial class ActCha : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ActCha_Num;
		
		private string _ActCha_Name;
		
		private EntitySet<OrgAct> _OrgAct;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActCha_NumChanging(string value);
    partial void OnActCha_NumChanged();
    partial void OnActCha_NameChanging(string value);
    partial void OnActCha_NameChanged();
    #endregion
		
		public ActCha()
		{
			this._OrgAct = new EntitySet<OrgAct>(new Action<OrgAct>(this.attach_OrgAct), new Action<OrgAct>(this.detach_OrgAct));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActCha_Num", DbType="Char(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ActCha_Num
		{
			get
			{
				return this._ActCha_Num;
			}
			set
			{
				if ((this._ActCha_Num != value))
				{
					this.OnActCha_NumChanging(value);
					this.SendPropertyChanging();
					this._ActCha_Num = value;
					this.SendPropertyChanged("ActCha_Num");
					this.OnActCha_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActCha_Name", DbType="Char(5)")]
		public string ActCha_Name
		{
			get
			{
				return this._ActCha_Name;
			}
			set
			{
				if ((this._ActCha_Name != value))
				{
					this.OnActCha_NameChanging(value);
					this.SendPropertyChanging();
					this._ActCha_Name = value;
					this.SendPropertyChanged("ActCha_Name");
					this.OnActCha_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActCha_OrgAct", Storage="_OrgAct", ThisKey="ActCha_Num", OtherKey="ActCha_Num")]
		public EntitySet<OrgAct> OrgAct
		{
			get
			{
				return this._OrgAct;
			}
			set
			{
				this._OrgAct.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrgAct(OrgAct entity)
		{
			this.SendPropertyChanging();
			entity.ActCha = this;
		}
		
		private void detach_OrgAct(OrgAct entity)
		{
			this.SendPropertyChanging();
			entity.ActCha = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.activity")]
	public partial class activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Org_Num;
		
		private string _OrgAct_Num;
		
		private EntityRef<OrgAct> _OrgAct;
		
		private EntityRef<Organization> _Organization;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrg_NumChanging(string value);
    partial void OnOrg_NumChanged();
    partial void OnOrgAct_NumChanging(string value);
    partial void OnOrgAct_NumChanged();
    #endregion
		
		public activity()
		{
			this._OrgAct = default(EntityRef<OrgAct>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Org_Num", DbType="Char(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Org_Num
		{
			get
			{
				return this._Org_Num;
			}
			set
			{
				if ((this._Org_Num != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrg_NumChanging(value);
					this.SendPropertyChanging();
					this._Org_Num = value;
					this.SendPropertyChanged("Org_Num");
					this.OnOrg_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgAct_Num", DbType="Char(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string OrgAct_Num
		{
			get
			{
				return this._OrgAct_Num;
			}
			set
			{
				if ((this._OrgAct_Num != value))
				{
					if (this._OrgAct.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgAct_NumChanging(value);
					this.SendPropertyChanging();
					this._OrgAct_Num = value;
					this.SendPropertyChanged("OrgAct_Num");
					this.OnOrgAct_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgAct_activity", Storage="_OrgAct", ThisKey="OrgAct_Num", OtherKey="OrgAct_Num", IsForeignKey=true)]
		public OrgAct OrgAct
		{
			get
			{
				return this._OrgAct.Entity;
			}
			set
			{
				OrgAct previousValue = this._OrgAct.Entity;
				if (((previousValue != value) 
							|| (this._OrgAct.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrgAct.Entity = null;
						previousValue.activity.Remove(this);
					}
					this._OrgAct.Entity = value;
					if ((value != null))
					{
						value.activity.Add(this);
						this._OrgAct_Num = value.OrgAct_Num;
					}
					else
					{
						this._OrgAct_Num = default(string);
					}
					this.SendPropertyChanged("OrgAct");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_activity", Storage="_Organization", ThisKey="Org_Num", OtherKey="Org_Num", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.activity.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.activity.Add(this);
						this._Org_Num = value.Org_Num;
					}
					else
					{
						this._Org_Num = default(string);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CNatu")]
	public partial class CNatu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CNat_Num;
		
		private string _C_Num;
		
		private string _CNat_Name;
		
		private EntityRef<Course> _Course;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCNat_NumChanging(int value);
    partial void OnCNat_NumChanged();
    partial void OnC_NumChanging(string value);
    partial void OnC_NumChanged();
    partial void OnCNat_NameChanging(string value);
    partial void OnCNat_NameChanged();
    #endregion
		
		public CNatu()
		{
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CNat_Num", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CNat_Num
		{
			get
			{
				return this._CNat_Num;
			}
			set
			{
				if ((this._CNat_Num != value))
				{
					this.OnCNat_NumChanging(value);
					this.SendPropertyChanging();
					this._CNat_Num = value;
					this.SendPropertyChanged("CNat_Num");
					this.OnCNat_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_Num", DbType="Char(10)")]
		public string C_Num
		{
			get
			{
				return this._C_Num;
			}
			set
			{
				if ((this._C_Num != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnC_NumChanging(value);
					this.SendPropertyChanging();
					this._C_Num = value;
					this.SendPropertyChanged("C_Num");
					this.OnC_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CNat_Name", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string CNat_Name
		{
			get
			{
				return this._CNat_Name;
			}
			set
			{
				if ((this._CNat_Name != value))
				{
					this.OnCNat_NameChanging(value);
					this.SendPropertyChanging();
					this._CNat_Name = value;
					this.SendPropertyChanged("CNat_Name");
					this.OnCNat_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CNatu", Storage="_Course", ThisKey="C_Num", OtherKey="C_Num", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CNatu.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CNatu.Add(this);
						this._C_Num = value.C_Num;
					}
					else
					{
						this._C_Num = default(string);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ColCha")]
	public partial class ColCha : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ColCha_Num;
		
		private string _ColCha_Name;
		
		private EntitySet<College> _College;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnColCha_NumChanging(string value);
    partial void OnColCha_NumChanged();
    partial void OnColCha_NameChanging(string value);
    partial void OnColCha_NameChanged();
    #endregion
		
		public ColCha()
		{
			this._College = new EntitySet<College>(new Action<College>(this.attach_College), new Action<College>(this.detach_College));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColCha_Num", DbType="Char(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ColCha_Num
		{
			get
			{
				return this._ColCha_Num;
			}
			set
			{
				if ((this._ColCha_Num != value))
				{
					this.OnColCha_NumChanging(value);
					this.SendPropertyChanging();
					this._ColCha_Num = value;
					this.SendPropertyChanged("ColCha_Num");
					this.OnColCha_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColCha_Name", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string ColCha_Name
		{
			get
			{
				return this._ColCha_Name;
			}
			set
			{
				if ((this._ColCha_Name != value))
				{
					this.OnColCha_NameChanging(value);
					this.SendPropertyChanging();
					this._ColCha_Name = value;
					this.SendPropertyChanged("ColCha_Name");
					this.OnColCha_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ColCha_College", Storage="_College", ThisKey="ColCha_Num", OtherKey="ColCha_Num")]
		public EntitySet<College> College
		{
			get
			{
				return this._College;
			}
			set
			{
				this._College.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_College(College entity)
		{
			this.SendPropertyChanging();
			entity.ColCha = this;
		}
		
		private void detach_College(College entity)
		{
			this.SendPropertyChanging();
			entity.ColCha = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.College")]
	public partial class College : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Col_Num;
		
		private string _ColCha_Num;
		
		private string _Col_Name;
		
		private string _Col_City;
		
		private EntitySet<Faulty> _Faulty;
		
		private EntityRef<ColCha> _ColCha;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCol_NumChanging(string value);
    partial void OnCol_NumChanged();
    partial void OnColCha_NumChanging(string value);
    partial void OnColCha_NumChanged();
    partial void OnCol_NameChanging(string value);
    partial void OnCol_NameChanged();
    partial void OnCol_CityChanging(string value);
    partial void OnCol_CityChanged();
    #endregion
		
		public College()
		{
			this._Faulty = new EntitySet<Faulty>(new Action<Faulty>(this.attach_Faulty), new Action<Faulty>(this.detach_Faulty));
			this._ColCha = default(EntityRef<ColCha>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Col_Num", DbType="Char(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Col_Num
		{
			get
			{
				return this._Col_Num;
			}
			set
			{
				if ((this._Col_Num != value))
				{
					this.OnCol_NumChanging(value);
					this.SendPropertyChanging();
					this._Col_Num = value;
					this.SendPropertyChanged("Col_Num");
					this.OnCol_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColCha_Num", DbType="Char(6)")]
		public string ColCha_Num
		{
			get
			{
				return this._ColCha_Num;
			}
			set
			{
				if ((this._ColCha_Num != value))
				{
					if (this._ColCha.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColCha_NumChanging(value);
					this.SendPropertyChanging();
					this._ColCha_Num = value;
					this.SendPropertyChanged("ColCha_Num");
					this.OnColCha_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Col_Name", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Col_Name
		{
			get
			{
				return this._Col_Name;
			}
			set
			{
				if ((this._Col_Name != value))
				{
					this.OnCol_NameChanging(value);
					this.SendPropertyChanging();
					this._Col_Name = value;
					this.SendPropertyChanged("Col_Name");
					this.OnCol_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Col_City", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string Col_City
		{
			get
			{
				return this._Col_City;
			}
			set
			{
				if ((this._Col_City != value))
				{
					this.OnCol_CityChanging(value);
					this.SendPropertyChanging();
					this._Col_City = value;
					this.SendPropertyChanged("Col_City");
					this.OnCol_CityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="College_Faulty", Storage="_Faulty", ThisKey="Col_Num", OtherKey="Col_Num")]
		public EntitySet<Faulty> Faulty
		{
			get
			{
				return this._Faulty;
			}
			set
			{
				this._Faulty.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ColCha_College", Storage="_ColCha", ThisKey="ColCha_Num", OtherKey="ColCha_Num", IsForeignKey=true)]
		public ColCha ColCha
		{
			get
			{
				return this._ColCha.Entity;
			}
			set
			{
				ColCha previousValue = this._ColCha.Entity;
				if (((previousValue != value) 
							|| (this._ColCha.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ColCha.Entity = null;
						previousValue.College.Remove(this);
					}
					this._ColCha.Entity = value;
					if ((value != null))
					{
						value.College.Add(this);
						this._ColCha_Num = value.ColCha_Num;
					}
					else
					{
						this._ColCha_Num = default(string);
					}
					this.SendPropertyChanged("ColCha");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Faulty(Faulty entity)
		{
			this.SendPropertyChanging();
			entity.College = this;
		}
		
		private void detach_Faulty(Faulty entity)
		{
			this.SendPropertyChanging();
			entity.College = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cou_teaching")]
	public partial class cou_teaching : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _C_Num;
		
		private string _教师代码;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Teacher> _Teacher;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnC_NumChanging(string value);
    partial void OnC_NumChanged();
    partial void On教师代码Changing(string value);
    partial void On教师代码Changed();
    #endregion
		
		public cou_teaching()
		{
			this._Course = default(EntityRef<Course>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_Num", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string C_Num
		{
			get
			{
				return this._C_Num;
			}
			set
			{
				if ((this._C_Num != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnC_NumChanging(value);
					this.SendPropertyChanging();
					this._C_Num = value;
					this.SendPropertyChanged("C_Num");
					this.OnC_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_教师代码", DbType="Char(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string 教师代码
		{
			get
			{
				return this._教师代码;
			}
			set
			{
				if ((this._教师代码 != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On教师代码Changing(value);
					this.SendPropertyChanging();
					this._教师代码 = value;
					this.SendPropertyChanged("教师代码");
					this.On教师代码Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_cou_teaching", Storage="_Course", ThisKey="C_Num", OtherKey="C_Num", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.cou_teaching.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.cou_teaching.Add(this);
						this._C_Num = value.C_Num;
					}
					else
					{
						this._C_Num = default(string);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_cou_teaching", Storage="_Teacher", ThisKey="教师代码", OtherKey="T_Num", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.cou_teaching.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.cou_teaching.Add(this);
						this._教师代码 = value.T_Num;
					}
					else
					{
						this._教师代码 = default(string);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _C_Num;
		
		private string _C_Name;
		
		private int _C_Time;
		
		private int _C_Score;
		
		private string _C_Year;
		
		private string _C_Team;
		
		private EntitySet<CNatu> _CNatu;
		
		private EntitySet<cou_teaching> _cou_teaching;
		
		private EntitySet<SC> _SC;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnC_NumChanging(string value);
    partial void OnC_NumChanged();
    partial void OnC_NameChanging(string value);
    partial void OnC_NameChanged();
    partial void OnC_TimeChanging(int value);
    partial void OnC_TimeChanged();
    partial void OnC_ScoreChanging(int value);
    partial void OnC_ScoreChanged();
    partial void OnC_YearChanging(string value);
    partial void OnC_YearChanged();
    partial void OnC_TeamChanging(string value);
    partial void OnC_TeamChanged();
    #endregion
		
		public Course()
		{
			this._CNatu = new EntitySet<CNatu>(new Action<CNatu>(this.attach_CNatu), new Action<CNatu>(this.detach_CNatu));
			this._cou_teaching = new EntitySet<cou_teaching>(new Action<cou_teaching>(this.attach_cou_teaching), new Action<cou_teaching>(this.detach_cou_teaching));
			this._SC = new EntitySet<SC>(new Action<SC>(this.attach_SC), new Action<SC>(this.detach_SC));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_Num", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string C_Num
		{
			get
			{
				return this._C_Num;
			}
			set
			{
				if ((this._C_Num != value))
				{
					this.OnC_NumChanging(value);
					this.SendPropertyChanging();
					this._C_Num = value;
					this.SendPropertyChanged("C_Num");
					this.OnC_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_Name", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string C_Name
		{
			get
			{
				return this._C_Name;
			}
			set
			{
				if ((this._C_Name != value))
				{
					this.OnC_NameChanging(value);
					this.SendPropertyChanging();
					this._C_Name = value;
					this.SendPropertyChanged("C_Name");
					this.OnC_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_Time", DbType="Int NOT NULL")]
		public int C_Time
		{
			get
			{
				return this._C_Time;
			}
			set
			{
				if ((this._C_Time != value))
				{
					this.OnC_TimeChanging(value);
					this.SendPropertyChanging();
					this._C_Time = value;
					this.SendPropertyChanged("C_Time");
					this.OnC_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_Score", DbType="Int NOT NULL")]
		public int C_Score
		{
			get
			{
				return this._C_Score;
			}
			set
			{
				if ((this._C_Score != value))
				{
					this.OnC_ScoreChanging(value);
					this.SendPropertyChanging();
					this._C_Score = value;
					this.SendPropertyChanged("C_Score");
					this.OnC_ScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_Year", DbType="Char(10)")]
		public string C_Year
		{
			get
			{
				return this._C_Year;
			}
			set
			{
				if ((this._C_Year != value))
				{
					this.OnC_YearChanging(value);
					this.SendPropertyChanging();
					this._C_Year = value;
					this.SendPropertyChanged("C_Year");
					this.OnC_YearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_Team", DbType="Char(10)")]
		public string C_Team
		{
			get
			{
				return this._C_Team;
			}
			set
			{
				if ((this._C_Team != value))
				{
					this.OnC_TeamChanging(value);
					this.SendPropertyChanging();
					this._C_Team = value;
					this.SendPropertyChanged("C_Team");
					this.OnC_TeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CNatu", Storage="_CNatu", ThisKey="C_Num", OtherKey="C_Num")]
		public EntitySet<CNatu> CNatu
		{
			get
			{
				return this._CNatu;
			}
			set
			{
				this._CNatu.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_cou_teaching", Storage="_cou_teaching", ThisKey="C_Num", OtherKey="C_Num")]
		public EntitySet<cou_teaching> cou_teaching
		{
			get
			{
				return this._cou_teaching;
			}
			set
			{
				this._cou_teaching.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_SC", Storage="_SC", ThisKey="C_Num", OtherKey="C_Num")]
		public EntitySet<SC> SC
		{
			get
			{
				return this._SC;
			}
			set
			{
				this._SC.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CNatu(CNatu entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CNatu(CNatu entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_cou_teaching(cou_teaching entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_cou_teaching(cou_teaching entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_SC(SC entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_SC(SC entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Faulty")]
	public partial class Faulty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Fac_Num;
		
		private string _Col_Num;
		
		private string _Fac_Name;
		
		private string _Fac_Dean;
		
		private string _Fac_EN;
		
		private string _Fac_Int;
		
		private EntitySet<Major> _Major;
		
		private EntitySet<Organization> _Organization;
		
		private EntitySet<Teacher> _Teacher;
		
		private EntityRef<College> _College;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFac_NumChanging(string value);
    partial void OnFac_NumChanged();
    partial void OnCol_NumChanging(string value);
    partial void OnCol_NumChanged();
    partial void OnFac_NameChanging(string value);
    partial void OnFac_NameChanged();
    partial void OnFac_DeanChanging(string value);
    partial void OnFac_DeanChanged();
    partial void OnFac_ENChanging(string value);
    partial void OnFac_ENChanged();
    partial void OnFac_IntChanging(string value);
    partial void OnFac_IntChanged();
    #endregion
		
		public Faulty()
		{
			this._Major = new EntitySet<Major>(new Action<Major>(this.attach_Major), new Action<Major>(this.detach_Major));
			this._Organization = new EntitySet<Organization>(new Action<Organization>(this.attach_Organization), new Action<Organization>(this.detach_Organization));
			this._Teacher = new EntitySet<Teacher>(new Action<Teacher>(this.attach_Teacher), new Action<Teacher>(this.detach_Teacher));
			this._College = default(EntityRef<College>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fac_Num", DbType="Char(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Fac_Num
		{
			get
			{
				return this._Fac_Num;
			}
			set
			{
				if ((this._Fac_Num != value))
				{
					this.OnFac_NumChanging(value);
					this.SendPropertyChanging();
					this._Fac_Num = value;
					this.SendPropertyChanged("Fac_Num");
					this.OnFac_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Col_Num", DbType="Char(6)")]
		public string Col_Num
		{
			get
			{
				return this._Col_Num;
			}
			set
			{
				if ((this._Col_Num != value))
				{
					if (this._College.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCol_NumChanging(value);
					this.SendPropertyChanging();
					this._Col_Num = value;
					this.SendPropertyChanged("Col_Num");
					this.OnCol_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fac_Name", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Fac_Name
		{
			get
			{
				return this._Fac_Name;
			}
			set
			{
				if ((this._Fac_Name != value))
				{
					this.OnFac_NameChanging(value);
					this.SendPropertyChanging();
					this._Fac_Name = value;
					this.SendPropertyChanged("Fac_Name");
					this.OnFac_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fac_Dean", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string Fac_Dean
		{
			get
			{
				return this._Fac_Dean;
			}
			set
			{
				if ((this._Fac_Dean != value))
				{
					this.OnFac_DeanChanging(value);
					this.SendPropertyChanging();
					this._Fac_Dean = value;
					this.SendPropertyChanged("Fac_Dean");
					this.OnFac_DeanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fac_EN", DbType="Char(10)")]
		public string Fac_EN
		{
			get
			{
				return this._Fac_EN;
			}
			set
			{
				if ((this._Fac_EN != value))
				{
					this.OnFac_ENChanging(value);
					this.SendPropertyChanging();
					this._Fac_EN = value;
					this.SendPropertyChanged("Fac_EN");
					this.OnFac_ENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fac_Int", DbType="VarChar(15)")]
		public string Fac_Int
		{
			get
			{
				return this._Fac_Int;
			}
			set
			{
				if ((this._Fac_Int != value))
				{
					this.OnFac_IntChanging(value);
					this.SendPropertyChanging();
					this._Fac_Int = value;
					this.SendPropertyChanged("Fac_Int");
					this.OnFac_IntChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faulty_Major", Storage="_Major", ThisKey="Fac_Num", OtherKey="Fac_Num")]
		public EntitySet<Major> Major
		{
			get
			{
				return this._Major;
			}
			set
			{
				this._Major.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faulty_Organization", Storage="_Organization", ThisKey="Fac_Num", OtherKey="Fac_Num")]
		public EntitySet<Organization> Organization
		{
			get
			{
				return this._Organization;
			}
			set
			{
				this._Organization.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faulty_Teacher", Storage="_Teacher", ThisKey="Fac_Num", OtherKey="Fac_Num")]
		public EntitySet<Teacher> Teacher
		{
			get
			{
				return this._Teacher;
			}
			set
			{
				this._Teacher.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="College_Faulty", Storage="_College", ThisKey="Col_Num", OtherKey="Col_Num", IsForeignKey=true)]
		public College College
		{
			get
			{
				return this._College.Entity;
			}
			set
			{
				College previousValue = this._College.Entity;
				if (((previousValue != value) 
							|| (this._College.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._College.Entity = null;
						previousValue.Faulty.Remove(this);
					}
					this._College.Entity = value;
					if ((value != null))
					{
						value.Faulty.Add(this);
						this._Col_Num = value.Col_Num;
					}
					else
					{
						this._Col_Num = default(string);
					}
					this.SendPropertyChanged("College");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Major(Major entity)
		{
			this.SendPropertyChanging();
			entity.Faulty = this;
		}
		
		private void detach_Major(Major entity)
		{
			this.SendPropertyChanging();
			entity.Faulty = null;
		}
		
		private void attach_Organization(Organization entity)
		{
			this.SendPropertyChanging();
			entity.Faulty = this;
		}
		
		private void detach_Organization(Organization entity)
		{
			this.SendPropertyChanging();
			entity.Faulty = null;
		}
		
		private void attach_Teacher(Teacher entity)
		{
			this.SendPropertyChanging();
			entity.Faulty = this;
		}
		
		private void detach_Teacher(Teacher entity)
		{
			this.SendPropertyChanging();
			entity.Faulty = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Job")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _J_Num;
		
		private string _J_Name;
		
		private EntitySet<Teacher> _Teacher;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJ_NumChanging(string value);
    partial void OnJ_NumChanged();
    partial void OnJ_NameChanging(string value);
    partial void OnJ_NameChanged();
    #endregion
		
		public Job()
		{
			this._Teacher = new EntitySet<Teacher>(new Action<Teacher>(this.attach_Teacher), new Action<Teacher>(this.detach_Teacher));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_J_Num", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string J_Num
		{
			get
			{
				return this._J_Num;
			}
			set
			{
				if ((this._J_Num != value))
				{
					this.OnJ_NumChanging(value);
					this.SendPropertyChanging();
					this._J_Num = value;
					this.SendPropertyChanged("J_Num");
					this.OnJ_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_J_Name", DbType="Char(8) NOT NULL", CanBeNull=false)]
		public string J_Name
		{
			get
			{
				return this._J_Name;
			}
			set
			{
				if ((this._J_Name != value))
				{
					this.OnJ_NameChanging(value);
					this.SendPropertyChanging();
					this._J_Name = value;
					this.SendPropertyChanged("J_Name");
					this.OnJ_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_Teacher", Storage="_Teacher", ThisKey="J_Num", OtherKey="J_Num")]
		public EntitySet<Teacher> Teacher
		{
			get
			{
				return this._Teacher;
			}
			set
			{
				this._Teacher.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Teacher(Teacher entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_Teacher(Teacher entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Major")]
	public partial class Major : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _M_Num;
		
		private string _Fac_Num;
		
		private string _M_Name;
		
		private string _M_Intro;
		
		private string _M_EName;
		
		private EntitySet<Student> _Student;
		
		private EntitySet<Teacher> _Teacher;
		
		private EntityRef<Faulty> _Faulty;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnM_NumChanging(string value);
    partial void OnM_NumChanged();
    partial void OnFac_NumChanging(string value);
    partial void OnFac_NumChanged();
    partial void OnM_NameChanging(string value);
    partial void OnM_NameChanged();
    partial void OnM_IntroChanging(string value);
    partial void OnM_IntroChanged();
    partial void OnM_ENameChanging(string value);
    partial void OnM_ENameChanged();
    #endregion
		
		public Major()
		{
			this._Student = new EntitySet<Student>(new Action<Student>(this.attach_Student), new Action<Student>(this.detach_Student));
			this._Teacher = new EntitySet<Teacher>(new Action<Teacher>(this.attach_Teacher), new Action<Teacher>(this.detach_Teacher));
			this._Faulty = default(EntityRef<Faulty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_Num", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string M_Num
		{
			get
			{
				return this._M_Num;
			}
			set
			{
				if ((this._M_Num != value))
				{
					this.OnM_NumChanging(value);
					this.SendPropertyChanging();
					this._M_Num = value;
					this.SendPropertyChanged("M_Num");
					this.OnM_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fac_Num", DbType="Char(6)")]
		public string Fac_Num
		{
			get
			{
				return this._Fac_Num;
			}
			set
			{
				if ((this._Fac_Num != value))
				{
					if (this._Faulty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFac_NumChanging(value);
					this.SendPropertyChanging();
					this._Fac_Num = value;
					this.SendPropertyChanged("Fac_Num");
					this.OnFac_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_Name", DbType="Char(20) NOT NULL", CanBeNull=false)]
		public string M_Name
		{
			get
			{
				return this._M_Name;
			}
			set
			{
				if ((this._M_Name != value))
				{
					this.OnM_NameChanging(value);
					this.SendPropertyChanging();
					this._M_Name = value;
					this.SendPropertyChanged("M_Name");
					this.OnM_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_Intro", DbType="VarChar(20)")]
		public string M_Intro
		{
			get
			{
				return this._M_Intro;
			}
			set
			{
				if ((this._M_Intro != value))
				{
					this.OnM_IntroChanging(value);
					this.SendPropertyChanging();
					this._M_Intro = value;
					this.SendPropertyChanged("M_Intro");
					this.OnM_IntroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_EName", DbType="Char(20)")]
		public string M_EName
		{
			get
			{
				return this._M_EName;
			}
			set
			{
				if ((this._M_EName != value))
				{
					this.OnM_ENameChanging(value);
					this.SendPropertyChanging();
					this._M_EName = value;
					this.SendPropertyChanged("M_EName");
					this.OnM_ENameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_Student", Storage="_Student", ThisKey="M_Num", OtherKey="M_Num")]
		public EntitySet<Student> Student
		{
			get
			{
				return this._Student;
			}
			set
			{
				this._Student.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_Teacher", Storage="_Teacher", ThisKey="M_Num", OtherKey="M_Num")]
		public EntitySet<Teacher> Teacher
		{
			get
			{
				return this._Teacher;
			}
			set
			{
				this._Teacher.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faulty_Major", Storage="_Faulty", ThisKey="Fac_Num", OtherKey="Fac_Num", IsForeignKey=true)]
		public Faulty Faulty
		{
			get
			{
				return this._Faulty.Entity;
			}
			set
			{
				Faulty previousValue = this._Faulty.Entity;
				if (((previousValue != value) 
							|| (this._Faulty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faulty.Entity = null;
						previousValue.Major.Remove(this);
					}
					this._Faulty.Entity = value;
					if ((value != null))
					{
						value.Major.Add(this);
						this._Fac_Num = value.Fac_Num;
					}
					else
					{
						this._Fac_Num = default(string);
					}
					this.SendPropertyChanged("Faulty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Student(Student entity)
		{
			this.SendPropertyChanging();
			entity.Major = this;
		}
		
		private void detach_Student(Student entity)
		{
			this.SendPropertyChanging();
			entity.Major = null;
		}
		
		private void attach_Teacher(Teacher entity)
		{
			this.SendPropertyChanging();
			entity.Major = this;
		}
		
		private void detach_Teacher(Teacher entity)
		{
			this.SendPropertyChanging();
			entity.Major = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.offered")]
	public partial class offered : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _S_Num;
		
		private string _Org_Num;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<Student> _Student;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnS_NumChanging(string value);
    partial void OnS_NumChanged();
    partial void OnOrg_NumChanging(string value);
    partial void OnOrg_NumChanged();
    #endregion
		
		public offered()
		{
			this._Organization = default(EntityRef<Organization>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Num", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string S_Num
		{
			get
			{
				return this._S_Num;
			}
			set
			{
				if ((this._S_Num != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnS_NumChanging(value);
					this.SendPropertyChanging();
					this._S_Num = value;
					this.SendPropertyChanged("S_Num");
					this.OnS_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Org_Num", DbType="Char(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Org_Num
		{
			get
			{
				return this._Org_Num;
			}
			set
			{
				if ((this._Org_Num != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrg_NumChanging(value);
					this.SendPropertyChanging();
					this._Org_Num = value;
					this.SendPropertyChanged("Org_Num");
					this.OnOrg_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_offered", Storage="_Organization", ThisKey="Org_Num", OtherKey="Org_Num", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.offered.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.offered.Add(this);
						this._Org_Num = value.Org_Num;
					}
					else
					{
						this._Org_Num = default(string);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_offered", Storage="_Student", ThisKey="S_Num", OtherKey="S_Num", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.offered.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.offered.Add(this);
						this._S_Num = value.S_Num;
					}
					else
					{
						this._S_Num = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrgAct")]
	public partial class OrgAct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _OrgAct_Num;
		
		private string _ActCha_Num;
		
		private string _OrgAct_Name;
		
		private System.DateTime _OrgAct_StaT;
		
		private System.DateTime _OrgAct_EndT;
		
		private string _OrgAct_Lead;
		
		private EntitySet<activity> _activity;
		
		private EntityRef<ActCha> _ActCha;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrgAct_NumChanging(string value);
    partial void OnOrgAct_NumChanged();
    partial void OnActCha_NumChanging(string value);
    partial void OnActCha_NumChanged();
    partial void OnOrgAct_NameChanging(string value);
    partial void OnOrgAct_NameChanged();
    partial void OnOrgAct_StaTChanging(System.DateTime value);
    partial void OnOrgAct_StaTChanged();
    partial void OnOrgAct_EndTChanging(System.DateTime value);
    partial void OnOrgAct_EndTChanged();
    partial void OnOrgAct_LeadChanging(string value);
    partial void OnOrgAct_LeadChanged();
    #endregion
		
		public OrgAct()
		{
			this._activity = new EntitySet<activity>(new Action<activity>(this.attach_activity), new Action<activity>(this.detach_activity));
			this._ActCha = default(EntityRef<ActCha>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgAct_Num", DbType="Char(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string OrgAct_Num
		{
			get
			{
				return this._OrgAct_Num;
			}
			set
			{
				if ((this._OrgAct_Num != value))
				{
					this.OnOrgAct_NumChanging(value);
					this.SendPropertyChanging();
					this._OrgAct_Num = value;
					this.SendPropertyChanged("OrgAct_Num");
					this.OnOrgAct_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActCha_Num", DbType="Char(5)")]
		public string ActCha_Num
		{
			get
			{
				return this._ActCha_Num;
			}
			set
			{
				if ((this._ActCha_Num != value))
				{
					if (this._ActCha.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActCha_NumChanging(value);
					this.SendPropertyChanging();
					this._ActCha_Num = value;
					this.SendPropertyChanged("ActCha_Num");
					this.OnActCha_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgAct_Name", DbType="Char(20) NOT NULL", CanBeNull=false)]
		public string OrgAct_Name
		{
			get
			{
				return this._OrgAct_Name;
			}
			set
			{
				if ((this._OrgAct_Name != value))
				{
					this.OnOrgAct_NameChanging(value);
					this.SendPropertyChanging();
					this._OrgAct_Name = value;
					this.SendPropertyChanged("OrgAct_Name");
					this.OnOrgAct_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgAct_StaT", DbType="DateTime NOT NULL")]
		public System.DateTime OrgAct_StaT
		{
			get
			{
				return this._OrgAct_StaT;
			}
			set
			{
				if ((this._OrgAct_StaT != value))
				{
					this.OnOrgAct_StaTChanging(value);
					this.SendPropertyChanging();
					this._OrgAct_StaT = value;
					this.SendPropertyChanged("OrgAct_StaT");
					this.OnOrgAct_StaTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgAct_EndT", DbType="DateTime NOT NULL")]
		public System.DateTime OrgAct_EndT
		{
			get
			{
				return this._OrgAct_EndT;
			}
			set
			{
				if ((this._OrgAct_EndT != value))
				{
					this.OnOrgAct_EndTChanging(value);
					this.SendPropertyChanging();
					this._OrgAct_EndT = value;
					this.SendPropertyChanged("OrgAct_EndT");
					this.OnOrgAct_EndTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgAct_Lead", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string OrgAct_Lead
		{
			get
			{
				return this._OrgAct_Lead;
			}
			set
			{
				if ((this._OrgAct_Lead != value))
				{
					this.OnOrgAct_LeadChanging(value);
					this.SendPropertyChanging();
					this._OrgAct_Lead = value;
					this.SendPropertyChanged("OrgAct_Lead");
					this.OnOrgAct_LeadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgAct_activity", Storage="_activity", ThisKey="OrgAct_Num", OtherKey="OrgAct_Num")]
		public EntitySet<activity> activity
		{
			get
			{
				return this._activity;
			}
			set
			{
				this._activity.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActCha_OrgAct", Storage="_ActCha", ThisKey="ActCha_Num", OtherKey="ActCha_Num", IsForeignKey=true)]
		public ActCha ActCha
		{
			get
			{
				return this._ActCha.Entity;
			}
			set
			{
				ActCha previousValue = this._ActCha.Entity;
				if (((previousValue != value) 
							|| (this._ActCha.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActCha.Entity = null;
						previousValue.OrgAct.Remove(this);
					}
					this._ActCha.Entity = value;
					if ((value != null))
					{
						value.OrgAct.Add(this);
						this._ActCha_Num = value.ActCha_Num;
					}
					else
					{
						this._ActCha_Num = default(string);
					}
					this.SendPropertyChanged("ActCha");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_activity(activity entity)
		{
			this.SendPropertyChanging();
			entity.OrgAct = this;
		}
		
		private void detach_activity(activity entity)
		{
			this.SendPropertyChanging();
			entity.OrgAct = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organization")]
	public partial class Organization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Org_Num;
		
		private string _OrgCha_Num;
		
		private string _T_Num;
		
		private string _OrgGra_Num;
		
		private string _Fac_Num;
		
		private string _Org_Name;
		
		private System.DateTime _Org_CreTime;
		
		private EntitySet<activity> _activity;
		
		private EntitySet<offered> _offered;
		
		private EntityRef<Faulty> _Faulty;
		
		private EntityRef<OrgCha> _OrgCha;
		
		private EntityRef<OrgGra> _OrgGra;
		
		private EntityRef<Teacher> _Teacher;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrg_NumChanging(string value);
    partial void OnOrg_NumChanged();
    partial void OnOrgCha_NumChanging(string value);
    partial void OnOrgCha_NumChanged();
    partial void OnT_NumChanging(string value);
    partial void OnT_NumChanged();
    partial void OnOrgGra_NumChanging(string value);
    partial void OnOrgGra_NumChanged();
    partial void OnFac_NumChanging(string value);
    partial void OnFac_NumChanged();
    partial void OnOrg_NameChanging(string value);
    partial void OnOrg_NameChanged();
    partial void OnOrg_CreTimeChanging(System.DateTime value);
    partial void OnOrg_CreTimeChanged();
    #endregion
		
		public Organization()
		{
			this._activity = new EntitySet<activity>(new Action<activity>(this.attach_activity), new Action<activity>(this.detach_activity));
			this._offered = new EntitySet<offered>(new Action<offered>(this.attach_offered), new Action<offered>(this.detach_offered));
			this._Faulty = default(EntityRef<Faulty>);
			this._OrgCha = default(EntityRef<OrgCha>);
			this._OrgGra = default(EntityRef<OrgGra>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Org_Num", DbType="Char(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Org_Num
		{
			get
			{
				return this._Org_Num;
			}
			set
			{
				if ((this._Org_Num != value))
				{
					this.OnOrg_NumChanging(value);
					this.SendPropertyChanging();
					this._Org_Num = value;
					this.SendPropertyChanged("Org_Num");
					this.OnOrg_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgCha_Num", DbType="Char(10)")]
		public string OrgCha_Num
		{
			get
			{
				return this._OrgCha_Num;
			}
			set
			{
				if ((this._OrgCha_Num != value))
				{
					if (this._OrgCha.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgCha_NumChanging(value);
					this.SendPropertyChanging();
					this._OrgCha_Num = value;
					this.SendPropertyChanged("OrgCha_Num");
					this.OnOrgCha_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_T_Num", DbType="Char(5)")]
		public string T_Num
		{
			get
			{
				return this._T_Num;
			}
			set
			{
				if ((this._T_Num != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnT_NumChanging(value);
					this.SendPropertyChanging();
					this._T_Num = value;
					this.SendPropertyChanged("T_Num");
					this.OnT_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgGra_Num", DbType="Char(5)")]
		public string OrgGra_Num
		{
			get
			{
				return this._OrgGra_Num;
			}
			set
			{
				if ((this._OrgGra_Num != value))
				{
					if (this._OrgGra.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgGra_NumChanging(value);
					this.SendPropertyChanging();
					this._OrgGra_Num = value;
					this.SendPropertyChanged("OrgGra_Num");
					this.OnOrgGra_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fac_Num", DbType="Char(6)")]
		public string Fac_Num
		{
			get
			{
				return this._Fac_Num;
			}
			set
			{
				if ((this._Fac_Num != value))
				{
					if (this._Faulty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFac_NumChanging(value);
					this.SendPropertyChanging();
					this._Fac_Num = value;
					this.SendPropertyChanged("Fac_Num");
					this.OnFac_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Org_Name", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Org_Name
		{
			get
			{
				return this._Org_Name;
			}
			set
			{
				if ((this._Org_Name != value))
				{
					this.OnOrg_NameChanging(value);
					this.SendPropertyChanging();
					this._Org_Name = value;
					this.SendPropertyChanged("Org_Name");
					this.OnOrg_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Org_CreTime", DbType="DateTime NOT NULL")]
		public System.DateTime Org_CreTime
		{
			get
			{
				return this._Org_CreTime;
			}
			set
			{
				if ((this._Org_CreTime != value))
				{
					this.OnOrg_CreTimeChanging(value);
					this.SendPropertyChanging();
					this._Org_CreTime = value;
					this.SendPropertyChanged("Org_CreTime");
					this.OnOrg_CreTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_activity", Storage="_activity", ThisKey="Org_Num", OtherKey="Org_Num")]
		public EntitySet<activity> activity
		{
			get
			{
				return this._activity;
			}
			set
			{
				this._activity.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_offered", Storage="_offered", ThisKey="Org_Num", OtherKey="Org_Num")]
		public EntitySet<offered> offered
		{
			get
			{
				return this._offered;
			}
			set
			{
				this._offered.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faulty_Organization", Storage="_Faulty", ThisKey="Fac_Num", OtherKey="Fac_Num", IsForeignKey=true)]
		public Faulty Faulty
		{
			get
			{
				return this._Faulty.Entity;
			}
			set
			{
				Faulty previousValue = this._Faulty.Entity;
				if (((previousValue != value) 
							|| (this._Faulty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faulty.Entity = null;
						previousValue.Organization.Remove(this);
					}
					this._Faulty.Entity = value;
					if ((value != null))
					{
						value.Organization.Add(this);
						this._Fac_Num = value.Fac_Num;
					}
					else
					{
						this._Fac_Num = default(string);
					}
					this.SendPropertyChanged("Faulty");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgCha_Organization", Storage="_OrgCha", ThisKey="OrgCha_Num", OtherKey="OrgCha_Num", IsForeignKey=true)]
		public OrgCha OrgCha
		{
			get
			{
				return this._OrgCha.Entity;
			}
			set
			{
				OrgCha previousValue = this._OrgCha.Entity;
				if (((previousValue != value) 
							|| (this._OrgCha.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrgCha.Entity = null;
						previousValue.Organization.Remove(this);
					}
					this._OrgCha.Entity = value;
					if ((value != null))
					{
						value.Organization.Add(this);
						this._OrgCha_Num = value.OrgCha_Num;
					}
					else
					{
						this._OrgCha_Num = default(string);
					}
					this.SendPropertyChanged("OrgCha");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgGra_Organization", Storage="_OrgGra", ThisKey="OrgGra_Num", OtherKey="OrgGra_Num", IsForeignKey=true)]
		public OrgGra OrgGra
		{
			get
			{
				return this._OrgGra.Entity;
			}
			set
			{
				OrgGra previousValue = this._OrgGra.Entity;
				if (((previousValue != value) 
							|| (this._OrgGra.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrgGra.Entity = null;
						previousValue.Organization.Remove(this);
					}
					this._OrgGra.Entity = value;
					if ((value != null))
					{
						value.Organization.Add(this);
						this._OrgGra_Num = value.OrgGra_Num;
					}
					else
					{
						this._OrgGra_Num = default(string);
					}
					this.SendPropertyChanged("OrgGra");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Organization", Storage="_Teacher", ThisKey="T_Num", OtherKey="T_Num", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.Organization.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.Organization.Add(this);
						this._T_Num = value.T_Num;
					}
					else
					{
						this._T_Num = default(string);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_activity(activity entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_activity(activity entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_offered(offered entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_offered(offered entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrgCha")]
	public partial class OrgCha : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _OrgCha_Num;
		
		private string _OrgCha_Name;
		
		private EntitySet<Organization> _Organization;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrgCha_NumChanging(string value);
    partial void OnOrgCha_NumChanged();
    partial void OnOrgCha_NameChanging(string value);
    partial void OnOrgCha_NameChanged();
    #endregion
		
		public OrgCha()
		{
			this._Organization = new EntitySet<Organization>(new Action<Organization>(this.attach_Organization), new Action<Organization>(this.detach_Organization));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgCha_Num", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string OrgCha_Num
		{
			get
			{
				return this._OrgCha_Num;
			}
			set
			{
				if ((this._OrgCha_Num != value))
				{
					this.OnOrgCha_NumChanging(value);
					this.SendPropertyChanging();
					this._OrgCha_Num = value;
					this.SendPropertyChanged("OrgCha_Num");
					this.OnOrgCha_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgCha_Name", DbType="Char(10)")]
		public string OrgCha_Name
		{
			get
			{
				return this._OrgCha_Name;
			}
			set
			{
				if ((this._OrgCha_Name != value))
				{
					this.OnOrgCha_NameChanging(value);
					this.SendPropertyChanging();
					this._OrgCha_Name = value;
					this.SendPropertyChanged("OrgCha_Name");
					this.OnOrgCha_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgCha_Organization", Storage="_Organization", ThisKey="OrgCha_Num", OtherKey="OrgCha_Num")]
		public EntitySet<Organization> Organization
		{
			get
			{
				return this._Organization;
			}
			set
			{
				this._Organization.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Organization(Organization entity)
		{
			this.SendPropertyChanging();
			entity.OrgCha = this;
		}
		
		private void detach_Organization(Organization entity)
		{
			this.SendPropertyChanging();
			entity.OrgCha = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrgGra")]
	public partial class OrgGra : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _OrgGra_Num;
		
		private string _OrgGra_Name;
		
		private EntitySet<Organization> _Organization;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrgGra_NumChanging(string value);
    partial void OnOrgGra_NumChanged();
    partial void OnOrgGra_NameChanging(string value);
    partial void OnOrgGra_NameChanged();
    #endregion
		
		public OrgGra()
		{
			this._Organization = new EntitySet<Organization>(new Action<Organization>(this.attach_Organization), new Action<Organization>(this.detach_Organization));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgGra_Num", DbType="Char(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string OrgGra_Num
		{
			get
			{
				return this._OrgGra_Num;
			}
			set
			{
				if ((this._OrgGra_Num != value))
				{
					this.OnOrgGra_NumChanging(value);
					this.SendPropertyChanging();
					this._OrgGra_Num = value;
					this.SendPropertyChanged("OrgGra_Num");
					this.OnOrgGra_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgGra_Name", DbType="Char(5) NOT NULL", CanBeNull=false)]
		public string OrgGra_Name
		{
			get
			{
				return this._OrgGra_Name;
			}
			set
			{
				if ((this._OrgGra_Name != value))
				{
					this.OnOrgGra_NameChanging(value);
					this.SendPropertyChanging();
					this._OrgGra_Name = value;
					this.SendPropertyChanged("OrgGra_Name");
					this.OnOrgGra_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgGra_Organization", Storage="_Organization", ThisKey="OrgGra_Num", OtherKey="OrgGra_Num")]
		public EntitySet<Organization> Organization
		{
			get
			{
				return this._Organization;
			}
			set
			{
				this._Organization.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Organization(Organization entity)
		{
			this.SendPropertyChanging();
			entity.OrgGra = this;
		}
		
		private void detach_Organization(Organization entity)
		{
			this.SendPropertyChanging();
			entity.OrgGra = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Politics")]
	public partial class Politics : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _P_Num;
		
		private string _P_Name;
		
		private EntitySet<Student> _Student;
		
		private EntitySet<Teacher> _Teacher;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnP_NumChanging(string value);
    partial void OnP_NumChanged();
    partial void OnP_NameChanging(string value);
    partial void OnP_NameChanged();
    #endregion
		
		public Politics()
		{
			this._Student = new EntitySet<Student>(new Action<Student>(this.attach_Student), new Action<Student>(this.detach_Student));
			this._Teacher = new EntitySet<Teacher>(new Action<Teacher>(this.attach_Teacher), new Action<Teacher>(this.detach_Teacher));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_Num", DbType="Char(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string P_Num
		{
			get
			{
				return this._P_Num;
			}
			set
			{
				if ((this._P_Num != value))
				{
					this.OnP_NumChanging(value);
					this.SendPropertyChanging();
					this._P_Num = value;
					this.SendPropertyChanged("P_Num");
					this.OnP_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_Name", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string P_Name
		{
			get
			{
				return this._P_Name;
			}
			set
			{
				if ((this._P_Name != value))
				{
					this.OnP_NameChanging(value);
					this.SendPropertyChanging();
					this._P_Name = value;
					this.SendPropertyChanged("P_Name");
					this.OnP_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Politics_Student", Storage="_Student", ThisKey="P_Num", OtherKey="P_Num")]
		public EntitySet<Student> Student
		{
			get
			{
				return this._Student;
			}
			set
			{
				this._Student.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Politics_Teacher", Storage="_Teacher", ThisKey="P_Num", OtherKey="P_Num")]
		public EntitySet<Teacher> Teacher
		{
			get
			{
				return this._Teacher;
			}
			set
			{
				this._Teacher.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Student(Student entity)
		{
			this.SendPropertyChanging();
			entity.Politics = this;
		}
		
		private void detach_Student(Student entity)
		{
			this.SendPropertyChanging();
			entity.Politics = null;
		}
		
		private void attach_Teacher(Teacher entity)
		{
			this.SendPropertyChanging();
			entity.Politics = this;
		}
		
		private void detach_Teacher(Teacher entity)
		{
			this.SendPropertyChanging();
			entity.Politics = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SC")]
	public partial class SC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _S_Num;
		
		private string _C_Num;
		
		private int _Grade;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Student> _Student;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnS_NumChanging(string value);
    partial void OnS_NumChanged();
    partial void OnC_NumChanging(string value);
    partial void OnC_NumChanged();
    partial void OnGradeChanging(int value);
    partial void OnGradeChanged();
    #endregion
		
		public SC()
		{
			this._Course = default(EntityRef<Course>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Num", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string S_Num
		{
			get
			{
				return this._S_Num;
			}
			set
			{
				if ((this._S_Num != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnS_NumChanging(value);
					this.SendPropertyChanging();
					this._S_Num = value;
					this.SendPropertyChanged("S_Num");
					this.OnS_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_Num", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string C_Num
		{
			get
			{
				return this._C_Num;
			}
			set
			{
				if ((this._C_Num != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnC_NumChanging(value);
					this.SendPropertyChanging();
					this._C_Num = value;
					this.SendPropertyChanged("C_Num");
					this.OnC_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="Int NOT NULL")]
		public int Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_SC", Storage="_Course", ThisKey="C_Num", OtherKey="C_Num", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.SC.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.SC.Add(this);
						this._C_Num = value.C_Num;
					}
					else
					{
						this._C_Num = default(string);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_SC", Storage="_Student", ThisKey="S_Num", OtherKey="S_Num", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.SC.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.SC.Add(this);
						this._S_Num = value.S_Num;
					}
					else
					{
						this._S_Num = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _S_Num;
		
		private string _M_Num;
		
		private string _P_Num;
		
		private string _S_Name;
		
		private System.DateTime _S_Birth;
		
		private string _S_Sex;
		
		private string _S_Place;
		
		private string _S_Grade;
		
		private EntitySet<offered> _offered;
		
		private EntitySet<SC> _SC;
		
		private EntityRef<Major> _Major;
		
		private EntityRef<Politics> _Politics;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnS_NumChanging(string value);
    partial void OnS_NumChanged();
    partial void OnM_NumChanging(string value);
    partial void OnM_NumChanged();
    partial void OnP_NumChanging(string value);
    partial void OnP_NumChanged();
    partial void OnS_NameChanging(string value);
    partial void OnS_NameChanged();
    partial void OnS_BirthChanging(System.DateTime value);
    partial void OnS_BirthChanged();
    partial void OnS_SexChanging(string value);
    partial void OnS_SexChanged();
    partial void OnS_PlaceChanging(string value);
    partial void OnS_PlaceChanged();
    partial void OnS_GradeChanging(string value);
    partial void OnS_GradeChanged();
    #endregion
		
		public Student()
		{
			this._offered = new EntitySet<offered>(new Action<offered>(this.attach_offered), new Action<offered>(this.detach_offered));
			this._SC = new EntitySet<SC>(new Action<SC>(this.attach_SC), new Action<SC>(this.detach_SC));
			this._Major = default(EntityRef<Major>);
			this._Politics = default(EntityRef<Politics>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Num", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string S_Num
		{
			get
			{
				return this._S_Num;
			}
			set
			{
				if ((this._S_Num != value))
				{
					this.OnS_NumChanging(value);
					this.SendPropertyChanging();
					this._S_Num = value;
					this.SendPropertyChanged("S_Num");
					this.OnS_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_Num", DbType="Char(10)")]
		public string M_Num
		{
			get
			{
				return this._M_Num;
			}
			set
			{
				if ((this._M_Num != value))
				{
					if (this._Major.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnM_NumChanging(value);
					this.SendPropertyChanging();
					this._M_Num = value;
					this.SendPropertyChanged("M_Num");
					this.OnM_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_Num", DbType="Char(2)")]
		public string P_Num
		{
			get
			{
				return this._P_Num;
			}
			set
			{
				if ((this._P_Num != value))
				{
					if (this._Politics.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnP_NumChanging(value);
					this.SendPropertyChanging();
					this._P_Num = value;
					this.SendPropertyChanged("P_Num");
					this.OnP_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Name", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string S_Name
		{
			get
			{
				return this._S_Name;
			}
			set
			{
				if ((this._S_Name != value))
				{
					this.OnS_NameChanging(value);
					this.SendPropertyChanging();
					this._S_Name = value;
					this.SendPropertyChanged("S_Name");
					this.OnS_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Birth", DbType="DateTime NOT NULL")]
		public System.DateTime S_Birth
		{
			get
			{
				return this._S_Birth;
			}
			set
			{
				if ((this._S_Birth != value))
				{
					this.OnS_BirthChanging(value);
					this.SendPropertyChanging();
					this._S_Birth = value;
					this.SendPropertyChanged("S_Birth");
					this.OnS_BirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Sex", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string S_Sex
		{
			get
			{
				return this._S_Sex;
			}
			set
			{
				if ((this._S_Sex != value))
				{
					this.OnS_SexChanging(value);
					this.SendPropertyChanging();
					this._S_Sex = value;
					this.SendPropertyChanged("S_Sex");
					this.OnS_SexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Place", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string S_Place
		{
			get
			{
				return this._S_Place;
			}
			set
			{
				if ((this._S_Place != value))
				{
					this.OnS_PlaceChanging(value);
					this.SendPropertyChanging();
					this._S_Place = value;
					this.SendPropertyChanged("S_Place");
					this.OnS_PlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_Grade", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string S_Grade
		{
			get
			{
				return this._S_Grade;
			}
			set
			{
				if ((this._S_Grade != value))
				{
					this.OnS_GradeChanging(value);
					this.SendPropertyChanging();
					this._S_Grade = value;
					this.SendPropertyChanged("S_Grade");
					this.OnS_GradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_offered", Storage="_offered", ThisKey="S_Num", OtherKey="S_Num")]
		public EntitySet<offered> offered
		{
			get
			{
				return this._offered;
			}
			set
			{
				this._offered.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_SC", Storage="_SC", ThisKey="S_Num", OtherKey="S_Num")]
		public EntitySet<SC> SC
		{
			get
			{
				return this._SC;
			}
			set
			{
				this._SC.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_Student", Storage="_Major", ThisKey="M_Num", OtherKey="M_Num", IsForeignKey=true)]
		public Major Major
		{
			get
			{
				return this._Major.Entity;
			}
			set
			{
				Major previousValue = this._Major.Entity;
				if (((previousValue != value) 
							|| (this._Major.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Major.Entity = null;
						previousValue.Student.Remove(this);
					}
					this._Major.Entity = value;
					if ((value != null))
					{
						value.Student.Add(this);
						this._M_Num = value.M_Num;
					}
					else
					{
						this._M_Num = default(string);
					}
					this.SendPropertyChanged("Major");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Politics_Student", Storage="_Politics", ThisKey="P_Num", OtherKey="P_Num", IsForeignKey=true)]
		public Politics Politics
		{
			get
			{
				return this._Politics.Entity;
			}
			set
			{
				Politics previousValue = this._Politics.Entity;
				if (((previousValue != value) 
							|| (this._Politics.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Politics.Entity = null;
						previousValue.Student.Remove(this);
					}
					this._Politics.Entity = value;
					if ((value != null))
					{
						value.Student.Add(this);
						this._P_Num = value.P_Num;
					}
					else
					{
						this._P_Num = default(string);
					}
					this.SendPropertyChanged("Politics");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_offered(offered entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_offered(offered entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_SC(SC entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_SC(SC entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teacher")]
	public partial class Teacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _T_Num;
		
		private string _M_Num;
		
		private string _P_Num;
		
		private string _Fac_Num;
		
		private string _J_Num;
		
		private string _T_Name;
		
		private string _T_Sex;
		
		private System.DateTime _T_Birthday;
		
		private string _T_Nation;
		
		private EntitySet<cou_teaching> _cou_teaching;
		
		private EntitySet<Organization> _Organization;
		
		private EntityRef<Major> _Major;
		
		private EntityRef<Job> _Job;
		
		private EntityRef<Faulty> _Faulty;
		
		private EntityRef<Politics> _Politics;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnT_NumChanging(string value);
    partial void OnT_NumChanged();
    partial void OnM_NumChanging(string value);
    partial void OnM_NumChanged();
    partial void OnP_NumChanging(string value);
    partial void OnP_NumChanged();
    partial void OnFac_NumChanging(string value);
    partial void OnFac_NumChanged();
    partial void OnJ_NumChanging(string value);
    partial void OnJ_NumChanged();
    partial void OnT_NameChanging(string value);
    partial void OnT_NameChanged();
    partial void OnT_SexChanging(string value);
    partial void OnT_SexChanged();
    partial void OnT_BirthdayChanging(System.DateTime value);
    partial void OnT_BirthdayChanged();
    partial void OnT_NationChanging(string value);
    partial void OnT_NationChanged();
    #endregion
		
		public Teacher()
		{
			this._cou_teaching = new EntitySet<cou_teaching>(new Action<cou_teaching>(this.attach_cou_teaching), new Action<cou_teaching>(this.detach_cou_teaching));
			this._Organization = new EntitySet<Organization>(new Action<Organization>(this.attach_Organization), new Action<Organization>(this.detach_Organization));
			this._Major = default(EntityRef<Major>);
			this._Job = default(EntityRef<Job>);
			this._Faulty = default(EntityRef<Faulty>);
			this._Politics = default(EntityRef<Politics>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_T_Num", DbType="Char(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string T_Num
		{
			get
			{
				return this._T_Num;
			}
			set
			{
				if ((this._T_Num != value))
				{
					this.OnT_NumChanging(value);
					this.SendPropertyChanging();
					this._T_Num = value;
					this.SendPropertyChanged("T_Num");
					this.OnT_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_Num", DbType="Char(10)")]
		public string M_Num
		{
			get
			{
				return this._M_Num;
			}
			set
			{
				if ((this._M_Num != value))
				{
					if (this._Major.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnM_NumChanging(value);
					this.SendPropertyChanging();
					this._M_Num = value;
					this.SendPropertyChanged("M_Num");
					this.OnM_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_Num", DbType="Char(2)")]
		public string P_Num
		{
			get
			{
				return this._P_Num;
			}
			set
			{
				if ((this._P_Num != value))
				{
					if (this._Politics.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnP_NumChanging(value);
					this.SendPropertyChanging();
					this._P_Num = value;
					this.SendPropertyChanged("P_Num");
					this.OnP_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fac_Num", DbType="Char(6)")]
		public string Fac_Num
		{
			get
			{
				return this._Fac_Num;
			}
			set
			{
				if ((this._Fac_Num != value))
				{
					if (this._Faulty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFac_NumChanging(value);
					this.SendPropertyChanging();
					this._Fac_Num = value;
					this.SendPropertyChanged("Fac_Num");
					this.OnFac_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_J_Num", DbType="Char(10)")]
		public string J_Num
		{
			get
			{
				return this._J_Num;
			}
			set
			{
				if ((this._J_Num != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJ_NumChanging(value);
					this.SendPropertyChanging();
					this._J_Num = value;
					this.SendPropertyChanged("J_Num");
					this.OnJ_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_T_Name", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string T_Name
		{
			get
			{
				return this._T_Name;
			}
			set
			{
				if ((this._T_Name != value))
				{
					this.OnT_NameChanging(value);
					this.SendPropertyChanging();
					this._T_Name = value;
					this.SendPropertyChanged("T_Name");
					this.OnT_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_T_Sex", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string T_Sex
		{
			get
			{
				return this._T_Sex;
			}
			set
			{
				if ((this._T_Sex != value))
				{
					this.OnT_SexChanging(value);
					this.SendPropertyChanging();
					this._T_Sex = value;
					this.SendPropertyChanged("T_Sex");
					this.OnT_SexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_T_Birthday", DbType="DateTime NOT NULL")]
		public System.DateTime T_Birthday
		{
			get
			{
				return this._T_Birthday;
			}
			set
			{
				if ((this._T_Birthday != value))
				{
					this.OnT_BirthdayChanging(value);
					this.SendPropertyChanging();
					this._T_Birthday = value;
					this.SendPropertyChanged("T_Birthday");
					this.OnT_BirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_T_Nation", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string T_Nation
		{
			get
			{
				return this._T_Nation;
			}
			set
			{
				if ((this._T_Nation != value))
				{
					this.OnT_NationChanging(value);
					this.SendPropertyChanging();
					this._T_Nation = value;
					this.SendPropertyChanged("T_Nation");
					this.OnT_NationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_cou_teaching", Storage="_cou_teaching", ThisKey="T_Num", OtherKey="教师代码")]
		public EntitySet<cou_teaching> cou_teaching
		{
			get
			{
				return this._cou_teaching;
			}
			set
			{
				this._cou_teaching.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Organization", Storage="_Organization", ThisKey="T_Num", OtherKey="T_Num")]
		public EntitySet<Organization> Organization
		{
			get
			{
				return this._Organization;
			}
			set
			{
				this._Organization.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_Teacher", Storage="_Major", ThisKey="M_Num", OtherKey="M_Num", IsForeignKey=true)]
		public Major Major
		{
			get
			{
				return this._Major.Entity;
			}
			set
			{
				Major previousValue = this._Major.Entity;
				if (((previousValue != value) 
							|| (this._Major.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Major.Entity = null;
						previousValue.Teacher.Remove(this);
					}
					this._Major.Entity = value;
					if ((value != null))
					{
						value.Teacher.Add(this);
						this._M_Num = value.M_Num;
					}
					else
					{
						this._M_Num = default(string);
					}
					this.SendPropertyChanged("Major");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_Teacher", Storage="_Job", ThisKey="J_Num", OtherKey="J_Num", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.Teacher.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.Teacher.Add(this);
						this._J_Num = value.J_Num;
					}
					else
					{
						this._J_Num = default(string);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faulty_Teacher", Storage="_Faulty", ThisKey="Fac_Num", OtherKey="Fac_Num", IsForeignKey=true)]
		public Faulty Faulty
		{
			get
			{
				return this._Faulty.Entity;
			}
			set
			{
				Faulty previousValue = this._Faulty.Entity;
				if (((previousValue != value) 
							|| (this._Faulty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faulty.Entity = null;
						previousValue.Teacher.Remove(this);
					}
					this._Faulty.Entity = value;
					if ((value != null))
					{
						value.Teacher.Add(this);
						this._Fac_Num = value.Fac_Num;
					}
					else
					{
						this._Fac_Num = default(string);
					}
					this.SendPropertyChanged("Faulty");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Politics_Teacher", Storage="_Politics", ThisKey="P_Num", OtherKey="P_Num", IsForeignKey=true)]
		public Politics Politics
		{
			get
			{
				return this._Politics.Entity;
			}
			set
			{
				Politics previousValue = this._Politics.Entity;
				if (((previousValue != value) 
							|| (this._Politics.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Politics.Entity = null;
						previousValue.Teacher.Remove(this);
					}
					this._Politics.Entity = value;
					if ((value != null))
					{
						value.Teacher.Add(this);
						this._P_Num = value.P_Num;
					}
					else
					{
						this._P_Num = default(string);
					}
					this.SendPropertyChanged("Politics");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_cou_teaching(cou_teaching entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_cou_teaching(cou_teaching entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
		
		private void attach_Organization(Organization entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_Organization(Organization entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.userinfo")]
	public partial class userinfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _user_id;
		
		private string _user_pwd;
		
		private string _ip_addr;
		
		private string _mac_addr;
		
		private System.Nullable<System.DateTime> _last_date;
		
		private string _last_ip;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_idChanging(string value);
    partial void Onuser_idChanged();
    partial void Onuser_pwdChanging(string value);
    partial void Onuser_pwdChanged();
    partial void Onip_addrChanging(string value);
    partial void Onip_addrChanged();
    partial void Onmac_addrChanging(string value);
    partial void Onmac_addrChanged();
    partial void Onlast_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onlast_dateChanged();
    partial void Onlast_ipChanging(string value);
    partial void Onlast_ipChanged();
    #endregion
		
		public userinfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_pwd", DbType="NVarChar(13) NOT NULL", CanBeNull=false)]
		public string user_pwd
		{
			get
			{
				return this._user_pwd;
			}
			set
			{
				if ((this._user_pwd != value))
				{
					this.Onuser_pwdChanging(value);
					this.SendPropertyChanging();
					this._user_pwd = value;
					this.SendPropertyChanged("user_pwd");
					this.Onuser_pwdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ip_addr", DbType="NVarChar(15)")]
		public string ip_addr
		{
			get
			{
				return this._ip_addr;
			}
			set
			{
				if ((this._ip_addr != value))
				{
					this.Onip_addrChanging(value);
					this.SendPropertyChanging();
					this._ip_addr = value;
					this.SendPropertyChanged("ip_addr");
					this.Onip_addrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mac_addr", DbType="NVarChar(30)")]
		public string mac_addr
		{
			get
			{
				return this._mac_addr;
			}
			set
			{
				if ((this._mac_addr != value))
				{
					this.Onmac_addrChanging(value);
					this.SendPropertyChanging();
					this._mac_addr = value;
					this.SendPropertyChanged("mac_addr");
					this.Onmac_addrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> last_date
		{
			get
			{
				return this._last_date;
			}
			set
			{
				if ((this._last_date != value))
				{
					this.Onlast_dateChanging(value);
					this.SendPropertyChanging();
					this._last_date = value;
					this.SendPropertyChanged("last_date");
					this.Onlast_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_ip", DbType="NVarChar(15)")]
		public string last_ip
		{
			get
			{
				return this._last_ip;
			}
			set
			{
				if ((this._last_ip != value))
				{
					this.Onlast_ipChanging(value);
					this.SendPropertyChanging();
					this._last_ip = value;
					this.SendPropertyChanged("last_ip");
					this.Onlast_ipChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
